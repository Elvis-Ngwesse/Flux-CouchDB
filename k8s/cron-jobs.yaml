apiVersion: batch/v1
kind: CronJob
metadata:
  name: create-car-namespaces
  namespace: car-app
spec:
  schedule: "*/10 * * * *"  # Every 10 minutes
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: create-ns-sa
          restartPolicy: OnFailure
          containers:
            - name: oc
              image: registry.redhat.io/openshift4/ose-cli:latest
              command:
                - /bin/bash
                - -c
                - |
                  echo "🔍 Checking and creating namespaces..."
                  for ns in car-app car-logs; do
                    if ! oc get namespace "$ns" >/dev/null 2>&1; then
                      echo "🚀 Creating namespace: $ns"
                      oc create namespace "$ns"
                    else
                      echo "✅ Namespace $ns already exists."
                    fi
                  done
                  echo "🎉 All namespaces checked and created if necessary."
                


---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: create-ns-sa
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: create-namespaces-role
rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: create-namespaces-binding
roleRef:
  kind: ClusterRole
  name: create-namespaces-role
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: create-ns-sa
    namespace: default
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: clean-car-logs
  namespace: car-app
spec:
  schedule: "*/10 * * * *"  # every 10 minutes
  concurrencyPolicy: Replace
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
            - name: cleaner
              image: busybox:latest
              command:
                - /bin/sh
                - -c
                - |
                  echo "Starting log cleanup..."
                  echo "Cleaning /app/logs (car-logs-pvc)"
                  find /app/logs -type f -mtime +7 -print -delete
                  echo "Cleaning /app/app_logs (car-app-pvc)"
                  find /app/app_logs -type f -mtime +7 -print -delete
                  echo "Cleanup complete"
              volumeMounts:
                - name: logs-pvc
                  mountPath: /app/logs
                - name: app-logs-pvc
                  mountPath: /app/app_logs
          volumes:
            - name: logs-pvc
              persistentVolumeClaim:
                claimName: car-logs-pvc
            - name: app-logs-pvc
              persistentVolumeClaim:
                claimName: car-app-pvc



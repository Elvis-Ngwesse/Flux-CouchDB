apiVersion: v1
kind: Service
metadata:
  name: couchdb
  namespace: car-app
  labels:
    app: couchdb
spec:
  clusterIP: None
  selector:
    app: couchdb
  ports:
    - port: 5984
      name: http
      targetPort: 5984
      protocol: TCP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: couchdb
  namespace: car-app
spec:
  serviceName: "couchdb"
  replicas: 2
  selector:
    matchLabels:
      app: couchdb
  template:
    metadata:
      labels:
        app: couchdb
    spec:
      containers:
        - name: couchdb
          image: couchdb:3
          ports:
            - containerPort: 5984
          env:
            - name: COUCHDB_USER
              valueFrom:
                secretKeyRef:
                  name: couchdb-secret
                  key: COUCHDB_USER
            - name: COUCHDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: couchdb-secret
                  key: COUCHDB_PASSWORD
            - name: COUCHDB_SECRET
              valueFrom:
                secretKeyRef:
                  name: couchdb-secret
                  key: COUCHDB_SECRET
            - name: NODENAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: COUCHDB_NODE_NAME
              value: "couchdb@$(NODENAME).couchdb"
          command: ["/bin/bash", "-c"]
          args:
            - |
              echo "[couchdb]
              single_node = false

              [cluster]
              q = 8
              n = 2
              r = 2
              w = 2

              [httpd]
              bind_address = 0.0.0.0

              [chttpd]
              bind_address = 0.0.0.0

              [admins]
              ${COUCHDB_USER} = ${COUCHDB_PASSWORD}

              [secret]
              cookie = ${COUCHDB_SECRET}

              [log]
              level = info
              " > /opt/couchdb/etc/local.d/docker.ini && \
              exec /opt/couchdb/bin/couchdb
          volumeMounts:
            - name: couchdb-data
              mountPath: /opt/couchdb/data
  volumeClaimTemplates:
    - metadata:
        name: couchdb-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
        storageClassName: standard
---
apiVersion: batch/v1
kind: Job
metadata:
  name: couchdb-init
  namespace: car-app
  labels:
    app: couchdb-init
spec:
  backoffLimit: 5
  template:
    metadata:
      labels:
        app: couchdb-init
    spec:
      restartPolicy: Never
      containers:
        - name: init
          image: curlimages/curl:latest
          command:
            - /bin/sh
            - -c
            - |
              echo "üì° Waiting for CouchDB nodes to become ready..."
              until curl -s http://couchdb-0.couchdb.car-app.svc.cluster.local:5984; do
                echo "‚è≥ Waiting for couchdb-0..."
                sleep 3
              done
              until curl -s http://couchdb-1.couchdb.car-app.svc.cluster.local:5984; do
                echo "‚è≥ Waiting for couchdb-1..."
                sleep 3
              done

              echo "‚úÖ CouchDB nodes are reachable."

              echo "üì° Checking if cluster is already enabled..."
              cluster_status=$(curl -s -u ${COUCHDB_USER}:${COUCHDB_PASSWORD} http://couchdb-0.couchdb.car-app.svc.cluster.local:5984/_cluster_setup)
              if echo "$cluster_status" | grep -q '"state":"cluster_enabled"'; then
                echo "‚úÖ Cluster already enabled, skipping enable step."
              else
                echo "üöÄ Enabling cluster on couchdb-0 and adding couchdb-1..."
                curl -X POST "http://${COUCHDB_USER}:${COUCHDB_PASSWORD}@couchdb-0.couchdb.car-app.svc.cluster.local:5984/_cluster_setup" \
                  -H "Content-Type: application/json" \
                  -d '{
                        "action": "enable_cluster",
                        "username": "'"${COUCHDB_USER}"'",
                        "password": "'"${COUCHDB_PASSWORD}"'",
                        "bind_address": "0.0.0.0",
                        "node_count": "2",
                        "remote_node": "couchdb-1.couchdb.car-app.svc.cluster.local",
                        "remote_current_user": "'"${COUCHDB_USER}"'",
                        "remote_current_password": "'"${COUCHDB_PASSWORD}"'"
                      }'

                echo "‚è≥ Waiting for cluster nodes to connect..."
                for i in $(seq 1 30); do
                  members=$(curl -s -u ${COUCHDB_USER}:${COUCHDB_PASSWORD} http://couchdb-0.couchdb.car-app.svc.cluster.local:5984/_membership)
                  joined=$(echo "$members" | grep -c '"cluster_nodes":\["couchdb@couchdb-0.couchdb.car-app.svc.cluster.local","couchdb@couchdb-1.couchdb.car-app.svc.cluster.local"\]')
                  if [ "$joined" -eq 1 ]; then
                    echo "‚úÖ Cluster nodes connected."
                    break
                  else
                    echo "‚è≥ Nodes not connected yet, retrying in 5 seconds... ($i/30)"
                    sleep 5
                  fi
                done

                if [ "$joined" -ne 1 ]; then
                  echo "‚ö†Ô∏è Timeout waiting for cluster nodes to connect. Cluster setup may fail."
                fi

                echo "üöÄ Finishing cluster setup..."
                curl -X POST "http://${COUCHDB_USER}:${COUCHDB_PASSWORD}@couchdb-0.couchdb.car-app.svc.cluster.local:5984/_cluster_setup" \
                  -H "Content-Type: application/json" \
                  -d '{"action": "finish_cluster"}'
              fi

              echo "üöÄ Creating _users database if it doesn't exist..."
              curl -sf -X PUT -u ${COUCHDB_USER}:${COUCHDB_PASSWORD} http://couchdb-0.couchdb.car-app.svc.cluster.local:5984/_users || echo "_users exists or creation failed"

              echo "‚úÖ CouchDB initialization job complete."
              echo "‚úÖ CouchDB cluster initialization complete."
          env:
            - name: COUCHDB_USER
              valueFrom:
                secretKeyRef:
                  name: couchdb-secret
                  key: COUCHDB_USER
            - name: COUCHDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: couchdb-secret
                  key: COUCHDB_PASSWORD

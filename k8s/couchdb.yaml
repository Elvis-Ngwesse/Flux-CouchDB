apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: couchdb
  namespace: car-app
  labels:
    app: couchdb
spec:
  serviceName: "couchdb"  # must match a Headless service
  replicas: 2
  selector:
    matchLabels:
      app: couchdb
  template:
    metadata:
      labels:
        app: couchdb
    spec:
      containers:
        - name: couchdb
          image: couchdb:3.3.2  # or keep 2.2.0 if you're targeting that version
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: COUCHDB_USER
              valueFrom:
                secretKeyRef:
                  name: couchdb-secret
                  key: COUCHDB_USER
            - name: COUCHDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: couchdb-secret
                  key: COUCHDB_PASSWORD
            - name: COUCHDB_SECRET
              valueFrom:
                secretKeyRef:
                  name: couchdb-secret
                  key: COUCHDB_SECRET
            - name: NODENAME
              value: couchdb@$(POD_NAME).couchdb.car-app.svc.cluster.local
            - name: COUCHDB_NODE_NAME
              value: couchdb@$(POD_NAME).couchdb
          ports:
            - name: couchdb
              containerPort: 5984
            - name: epmd
              containerPort: 4369
            - name: metrics
              containerPort: 9100
          command: ["/bin/bash", "-c"]
          args:
            - |
              echo "
              [couchdb]
              single_node = false

              [cluster]
              q = 8
              n = 2
              r = 2
              w = 2

              [httpd]
              bind_address = 0.0.0.0

              [chttpd]
              bind_address = 0.0.0.0

              [admins]
              ${COUCHDB_USER} = ${COUCHDB_PASSWORD}

              [secret]
              cookie = ${COUCHDB_SECRET}

              [log]
              level = info
              " > /opt/couchdb/etc/local.d/docker.ini && \
              /opt/couchdb/bin/couchdb
          volumeMounts:
            - name: couchdb-pvc
              mountPath: /opt/couchdb/data
  volumeClaimTemplates:
    - metadata:
        name: couchdb-pvc
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: standard
        resources:
          requests:
            storage: 5Gi

---
apiVersion: v1
kind: Service
metadata:
  name: couchdb
  namespace: car-app
  labels:
    app: couchdb
spec:
  type: ClusterIP
  clusterIP: None  # Headless service for StatefulSet
  ports:
    - port: 5984
      name: http
      protocol: TCP
      targetPort: 5984
  selector:
    app: couchdb  # match StatefulSet pods
---
apiVersion: v1
kind: Service
metadata:
  name: couchdb-nodeport
  namespace: car-app
  labels:
    app: couchdb
spec:
  type: NodePort
  ports:
    - port: 5984
      name: http
      nodePort: 30984  # Exposes the port externally on each node
      protocol: TCP
      targetPort: 5984
  selector:
    app: couchdb
--- 
apiVersion: batch/v1
kind: Job
metadata:
  name: couchdb-init-cluster
  namespace: car-app
spec:
  backoffLimit: 4
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: couchdb-init
        image: curlimages/curl:latest
        env:
          - name: COUCHDB_USER
            valueFrom:
              secretKeyRef:
                name: couchdb-secret
                key: COUCHDB_USER
          - name: COUCHDB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: couchdb-secret
                key: COUCHDB_PASSWORD
        command:
          - /bin/sh
          - -c
          - |
            set -e

            # Wait for CouchDB nodes to be reachable
            echo "üì° Waiting for CouchDB nodes to become ready..."

            for node in couchdb-0 couchdb-1; do
              until curl -u ${COUCHDB_USER}:${COUCHDB_PASSWORD} -s http://${node}.couchdb.car-app.svc.cluster.local:5984/; do
                echo "Waiting for $node..."
                sleep 5
              done
            done

            echo "‚úÖ CouchDB nodes are reachable."

            # Enable cluster on couchdb-0 and add couchdb-1
            echo "üöÄ Enabling cluster on couchdb-0 and adding couchdb-1..."
            curl -X POST \
              -u ${COUCHDB_USER}:${COUCHDB_PASSWORD} \
              -H "Content-Type: application/json" \
              http://couchdb-0.couchdb.car-app.svc.cluster.local:5984/_cluster_setup \
              -d '{
                    "action": "enable_cluster",
                    "username": "'"${COUCHDB_USER}"'",
                    "password": "'"${COUCHDB_PASSWORD}"'",
                    "bind_address": "0.0.0.0",
                    "node_count": "2",
                    "remote_node": "couchdb-1.couchdb.car-app.svc.cluster.local",
                    "remote_current_user": "'"${COUCHDB_USER}"'",
                    "remote_current_password": "'"${COUCHDB_PASSWORD}"'"
                  }'

            # Finish cluster setup
            echo "üöÄ Finishing cluster setup..."
            curl -X POST \
              -u ${COUCHDB_USER}:${COUCHDB_PASSWORD} \
              -H "Content-Type: application/json" \
              http://couchdb-0.couchdb.car-app.svc.cluster.local:5984/_cluster_setup \
              -d '{"action": "finish_cluster"}'

            # Create system databases
            echo "üóÇÔ∏è Creating system databases..."
            for db in _users _replicator _global_changes; do
              curl -X PUT \
                -u ${COUCHDB_USER}:${COUCHDB_PASSWORD} \
                http://couchdb-0.couchdb.car-app.svc.cluster.local:5984/${db} || echo "${db} exists or failed to create"
            done

            echo "‚úÖ CouchDB cluster initialization complete."
--- 
apiVersion: v1
kind: Pod
metadata:
  name: debug-nettools
  namespace: car-app
spec:
  containers:
  - name: debug
    image: nicolaka/netshoot
    command: ["sleep", "3600"]
    tty: true

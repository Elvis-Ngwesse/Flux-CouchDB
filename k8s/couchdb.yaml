apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: couchdb
  namespace: car-app
  labels:
    app: couchdb
spec:
  serviceName: "couchdb"  # must match a Headless service
  replicas: 2
  selector:
    matchLabels:
      app: couchdb
  template:
    metadata:
      labels:
        app: couchdb
    spec:
      containers:
        - name: couchdb
          image: couchdb:3.3.2  # or keep 2.2.0 if you're targeting that version
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: COUCHDB_USER
              valueFrom:
                secretKeyRef:
                  name: couchdb-secret
                  key: COUCHDB_USER
            - name: COUCHDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: couchdb-secret
                  key: COUCHDB_PASSWORD
            - name: COUCHDB_SECRET
              valueFrom:
                secretKeyRef:
                  name: couchdb-secret
                  key: COUCHDB_SECRET
            - name: NODENAME
              value: couchdb@$(POD_NAME).couchdb.car-app.svc.cluster.local
            - name: COUCHDB_NODE_NAME
              value: couchdb@$(POD_NAME).couchdb
          ports:
            - name: couchdb
              containerPort: 5984
            - name: epmd
              containerPort: 4369
            - name: metrics
              containerPort: 9100
          command: ["/bin/bash", "-c"]
          args:
            - |
              echo "
              [couchdb]
              single_node = false

              [cluster]
              q = 8
              n = 2
              r = 2
              w = 2

              [httpd]
              bind_address = 0.0.0.0

              [chttpd]
              bind_address = 0.0.0.0

              [admins]
              ${COUCHDB_USER} = ${COUCHDB_PASSWORD}

              [secret]
              cookie = ${COUCHDB_SECRET}

              [log]
              level = info
              " > /opt/couchdb/etc/local.d/docker.ini && \
              /opt/couchdb/bin/couchdb
          volumeMounts:
            - name: couchdb-pvc
              mountPath: /opt/couchdb/data
  volumeClaimTemplates:
    - metadata:
        name: couchdb-pvc
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: standard
        resources:
          requests:
            storage: 5Gi

---
apiVersion: v1
kind: Service
metadata:
  name: couchdb
  namespace: car-app
  labels:
    app: couchdb
spec:
  type: ClusterIP
  clusterIP: None  # Headless service for StatefulSet
  ports:
    - port: 5984
      name: http
      protocol: TCP
      targetPort: 5984
  selector:
    app: couchdb  # match StatefulSet pods
---
apiVersion: v1
kind: Service
metadata:
  name: couchdb-nodeport
  namespace: car-app
  labels:
    app: couchdb
spec:
  type: NodePort
  ports:
    - port: 5984
      name: http
      nodePort: 30984  # Exposes the port externally on each node
      protocol: TCP
      targetPort: 5984
  selector:
    app: couchdb
--- 
apiVersion: batch/v1
kind: Job
metadata:
  name: couchdb-init
  namespace: car-app
  labels:
    app: couchdb-init
spec:
  backoffLimit: 5
  template:
    metadata:
      labels:
        app: couchdb-init
    spec:
      restartPolicy: Never
      containers:
        - name: init
          image: curlimages/curl:latest
          command:
            - /bin/sh
            - -c
            - |
              echo "üì° Waiting for CouchDB nodes to become ready..."
              until curl -s http://couchdb-0.couchdb.car-app.svc.cluster.local:5984; do
                echo "‚è≥ Waiting for couchdb-0..."
                sleep 3
              done
              until curl -s http://couchdb-1.couchdb.car-app.svc.cluster.local:5984; do
                echo "‚è≥ Waiting for couchdb-1..."
                sleep 3
              done

              echo "‚úÖ CouchDB nodes are reachable."

              echo "üöÄ Enabling cluster on couchdb-0 and adding couchdb-1..."
              curl -X POST "http://${COUCHDB_USER}:${COUCHDB_PASSWORD}@couchdb-0.couchdb.car-app.svc.cluster.local:5984/_cluster_setup" \
                -H "Content-Type: application/json" \
                -d '{
                      "action": "enable_cluster",
                      "username": "'"${COUCHDB_USER}"'",
                      "password": "'"${COUCHDB_PASSWORD}"'",
                      "bind_address": "0.0.0.0",
                      "node_count": "2",
                      "remote_node": "couchdb-1.couchdb.car-app.svc.cluster.local",
                      "remote_current_user": "'"${COUCHDB_USER}"'",
                      "remote_current_password": "'"${COUCHDB_PASSWORD}"'"
                    }'

              echo "üïµÔ∏è Waiting for both nodes to appear in _membership..."
              attempt=1
              until curl -s -u ${COUCHDB_USER}:${COUCHDB_PASSWORD} http://couchdb-0.couchdb.car-app.svc.cluster.local:5984/_membership | grep couchdb-1; do
                echo "‚è≥ Nodes not connected yet, retrying in 5 seconds... ($attempt/30)"
                attempt=$((attempt+1))
                [ $attempt -gt 30 ] && echo "‚ùå Timed out waiting for nodes to connect" && exit 1
                sleep 5
              done

              echo "‚úÖ Nodes are visible in cluster membership."

              echo "üöÄ Finishing cluster setup..."
              curl -X POST "http://${COUCHDB_USER}:${COUCHDB_PASSWORD}@couchdb-0.couchdb.car-app.svc.cluster.local:5984/_cluster_setup" \
                -H "Content-Type: application/json" \
                -d '{"action": "finish_cluster"}'

              echo "üóÇÔ∏è Creating system databases..."
              for db in _users _replicator _global_changes; do
                echo "üìÅ Creating $db..."
                curl -sf -X PUT -u ${COUCHDB_USER}:${COUCHDB_PASSWORD} http://couchdb-0.couchdb.car-app.svc.cluster.local:5984/$db \
                  || echo "$db exists or failed to create"
              done

              echo "‚úÖ CouchDB cluster initialization complete."
          env:
            - name: COUCHDB_USER
              valueFrom:
                secretKeyRef:
                  name: couchdb-secret
                  key: COUCHDB_USER
            - name: COUCHDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: couchdb-secret
                  key: COUCHDB_PASSWORD
